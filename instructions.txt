Tasks Analytics Lab

Dear Siemens applicant, in order to give an impression of our typical problems we
need to solve daily, we provided you some tasks that resemble our day-to-day
business. Please answer the tasks below, if you do not have time to do all of them,
please focus on the first three tasks. We expect to receive your commented code as
well as a short text description on your observations about the problems, the results
and why you did the way you did it. Wherever necessary, make, and state your
assumptions.
Please use Python, where a language is not explicitly mentioned. If you do not have
time to solve all four tasks, please focus on the first three tasks.

Task 1: Implement an Internet-Search Agent
At Siemens, we are committed to sustainability and constantly strive to stay ahead in
understanding industry trends and competitor practices in this vital area. Assume we
have a use case where the Sustainability department at Siemens requires a digital
assistant that can conduct in-depth research, particularly in reviewing sustainability
reports from various companies. To address this need, we envision the development
of an Internet-Search Agent that can efficiently gather, process, and summarize
relevant sustainability information from the web.
Develop an Internet-Search Agent powered by a Language Model (LLM) that utilizes
an internet searching tool being able to answer questions beyond the implicit
knoweldge embedded inside the LLM.
Requirements
 Utilize an LLM, for instance using an open source framework such as Ollama
or one of the Llama 3.1 repositories.
 Integrate a search engine, like DuckDuckGo for retrieving information
(DuckDuckGo needs no API key)
 Implement the following functionalities:
o The agent must take user queries and return relevant search results
from the web when it is appropriate to do so.
o The agent should intelligently determine when to initiate a web search.
For example, it should not search the internet for greetings or simple
queries such as &quot;How are you?&quot;.
o For context-based responses, the agent should provide relevant
answers or acknowledgments without unnecessary internet searches.
o Ensure the LLM can interpret the search results and present them in a
human-readable format.

Deliverables
 A fully functional Internet-Search Agent.
 Documentation of the findings and approach

Task 2: Create an API for Agent Functionality
Design and implement an REST-API that allows interaction with the functionalities of
the Internet-Search Agent.
Requirements
The API should enable users to perform the following actions:
 Send queries to the agent and receive responses.
 Retrieve the current status of the agent (i.e., what the agent is doing at any
time).
Deliverables
 Source code for the API.
 API documentation, including endpoints, request/response examples, and
usage instructions, if necessary any design principles

Task 3: Deployment Strategy
Describe the strategy for deploying the developed Internet-Search Agent and API on
a hyperscaler of your choice (e.g., AWS, Google Cloud, Azure).
Requirements
 Provide an overview of the deployment architecture.
 Include considerations for scalability, reliability, security in your deployment
strategy
 Mention services or tools you would utilize (e.g., container orchestration,
databases, monitoring tools).
Deliverables
A detailed description outlining the deployment plan, including architecture diagrams
if applicable.

Task 4: Binary Classification
You are requested to solve a binary classification problem, for which a dataset is
provided (“Training_part1.csv”, “Training_part2.csv”). The dataset is split into two
tables, which should be combined first. The “id” column is present in both tables and
should be used for matching. The “class” column is the target variable.
Requirements
 Combine the two tables using the “id” column.
 Develop a binary classification model.
Deliverables
 A description of the data preprocessing steps.
 The code used to develop the binary classification model.

Task 5: Identifying alternative materials
The CSV file “Fuse.csv” consists of material descriptions and technical attributes for
several fuses. Your job is to find an algorithm that shows for every material five
alternatives by means of similar materials. To achieve this goal, please conduct the
following steps:
1. Load the data and make a descriptive analysis of the various attributes. Which
difficulties do you see with the data? Name at least two findings and show potential
solutions to circumvent them.
2. Build a model that can identify similar materials based on the attribute &quot;Part
Description.&quot; Explain your approach.
3. Outline the steps you would undertake to expand the model in step 2 to also
account for all the other attributes within the dataset.
Deliverables
 A descriptive analysis of the data, including identified issues and potential
solutions.
 The code used to develop the similarity identification model based on &quot;Part
Description.&quot;

Task 6: Functions for Categorical attributes
The first rows of the dataset are given only as an example:

Ticket ID COUNTRY DELAYED (Y/N)
T3656 DE Y
T1598 EN Y
T2105 CH N
Requirements
Implement a function receiving two input arguments:
o Input 1: A list of values from a categorical attribute (e.g., Country).
o Input 2: A threshold percentage (0%-100%).
Output: The output should be the list of the categorical attribute (Input 1). However,
values of categories that occur less frequent than the threshold percentage (Input 2)
should be replaced by a generic categorical value.
Deliverable
 Source code of the function
 Explain the utility of this function in constructing a logistic regression model for
predicting a binary outcome, such as &quot;Delayed (y/n)&quot;.
 Briefly describe an alternative method for managing a categorical attribute with
numerous distinct values. Additionally, provide a short overview of an algorithm
that inherently addresses this issue without requiring pre-treatment of categorical
attributes.